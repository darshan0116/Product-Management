generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  firstName       String
  lastName        String
  password        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Product         Product[]
  Cart            Cart?
  paymentCheckOut paymentCheckOut[]
  Order           Order[]
}

model Product {
  productId   Int      @id @default(autoincrement())
  name        String
  price       Float
  productDesc String
  productImg  String
  stock       Int
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int

  createdProduct User @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)

  cartItems  cartItems[]
  orderItems orderItems[]
}

model Cart {
  cartId    Int         @id @default(autoincrement())
  userId    Int         @unique
  userCart  User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  cartItems cartItems[]
}

model cartItems {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [cartId], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: Cascade)

  @@unique(name: "uniqueCartItem", [cartId, productId])
}

model Order {
  id              Int              @id @default(autoincrement())
  userId          Int
  userOrder       User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderDate       DateTime         @default(now())
  paymentCheckOut paymentCheckOut?
  orderItems      orderItems[]
}

model orderItems {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: Cascade)

  @@unique(name: "uniqueOrderItem", [orderId, productId])
}

model paymentCheckOut {
  id        Int      @id @default(autoincrement())
  userId    Int
  orderId   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalAmount    Float
  billingAddress Json

  isbillingSameAsShipping Boolean @default(false)

  shippingAddress Json?
  email           String
  phone           String
  notesOfPayment  String?
  userPayment            User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
